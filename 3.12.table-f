import dash
from dash import dcc, html, Input, Output, dash_table
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from scipy.optimize import curve_fit

# Sample Data (Replace with your Snowflake data)
np.random.seed(42)
tickers = ['AAPL', 'GOOGL', 'AMZN', 'MSFT', 'TSLA']
data = {
    'TICKER': np.random.choice(tickers, 100),
    'CUSIP': np.random.choice(['CUSIP001', 'CUSIP002', 'CUSIP003'], 100),
    'DURADJMOD': np.random.uniform(1, 10, 100),
    'OAS_BP': np.random.uniform(50, 150, 100),
    'Own?': np.random.choice(['Y', 'N'], 100)
}
df = pd.DataFrame(data)

# Define log function
def log_func(x, a, b):
    return a * np.log(x) + b

# Outlier report
outlier_report = []

# Create app
app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Dropdown(
        id='ticker-dropdown',
        options=[{'label': ticker, 'value': ticker} for ticker in sorted(df['TICKER'].unique())],
        value=sorted(df['TICKER'].unique())[0],  # Default to first ticker
        placeholder="Select or type a ticker...",
        searchable=True,
        clearable=True,
        style={'width': '50%', 'margin-bottom': '20px'}
    ),
    dcc.Graph(id='graph'),
    html.Hr(),

    # Outlier Table
    html.H3("Outlier Report (Owned & Below Line)"),
    dash_table.DataTable(
        id='outlier-table',
        columns=[
            {"name": "CUSIP", "id": "CUSIP"},
            {"name": "TICKER", "id": "TICKER"},
            {"name": "Deviation", "id": "Deviation"},
            {"name": "Above/Below", "id": "Above/Below"},
        ],
        data=[],
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left'},
        style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'}
    ),

    html.H3("Trade Suggestions"),
    dash_table.DataTable(
        id='trade-table',
        columns=[
            {"name": "CUSIP", "id": "CUSIP"},
            {"name": "Next Best Tickers to Trade", "id": "Linked_CUSIP"}
        ],
        data=[],
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left'},
        style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'}
    )
])

@app.callback(
    [Output('graph', 'figure'),
     Output('outlier-table', 'data'),
     Output('trade-table', 'data')],
    Input('ticker-dropdown', 'value')
)
def update_graph(selected_ticker):
    if not selected_ticker:
        return go.Figure(), [], []

    df_filtered = df[df['TICKER'] == selected_ticker]
    x = df_filtered['DURADJMOD'].values
    y = df_filtered['OAS_BP'].values
    
    if len(x) < 2:
        return go.Figure(), [], []

    # Fit log function
    params, _ = curve_fit(log_func, x, y)
    y_fit = log_func(x, *params)

    # Sort x for smoother line
    sorted_indices = np.argsort(x)
    x_sorted, y_fit_sorted = x[sorted_indices], y_fit[sorted_indices]

    # Compute deviation bands
    deviation_threshold = 5
    y_fit_upper = y_fit_sorted * (1 + deviation_threshold / 100)
    y_fit_lower = y_fit_sorted * (1 - deviation_threshold / 100)

    # Assign colors based on ownership
    colors = ['blue' if own == 'N' else 'red' for own in df_filtered['Own?']]

    # Create figure
    fig = go.Figure()

    # Scatter plot (color based on ownership)
    fig.add_trace(go.Scatter(
        x=df_filtered['DURADJMOD'],
        y=df_filtered['OAS_BP'],
        mode='markers',
        marker=dict(size=8, color=colors),
        name=f"{selected_ticker} Bonds",
        hovertemplate="<b>Duration:</b> %{x}<br>"
                      "<b>OAS:</b> %{y}<br>"
                      "<b>Owned:</b> %{customdata[0]}",
        customdata=df_filtered[['Own?']]
    ))

    # Log fit line
    fig.add_trace(go.Scatter(
        x=x_sorted,
        y=y_fit_sorted,
        mode='lines',
        line=dict(color='black'),
        name=f"Log Fit: {selected_ticker}"
    ))

    # Upper Bound (green dashed line)
    fig.add_trace(go.Scatter(
        x=x_sorted,
        y=y_fit_upper,
        mode='lines',
        line=dict(color='green', dash='dash'),
        name=f"{deviation_threshold}% Above Log Fit"
    ))

    # Lower Bound (blue dashed line)
    fig.add_trace(go.Scatter(
        x=x_sorted,
        y=y_fit_lower,
        mode='lines',
        line=dict(color='blue', dash='dash'),
        name=f"{deviation_threshold}% Below Log Fit"
    ))

    # Identify outliers
    outliers = []
    for i in range(len(x)):
        actual = y[i]
        expected = log_func(x[i], *params)
        deviation = actual - expected
        if actual > expected * (1 + deviation_threshold / 100) or actual < expected * (1 - deviation_threshold / 100):
            outliers.append({
                "CUSIP": df_filtered.iloc[i]['CUSIP'],
                "TICKER": selected_ticker,
                "Deviation": round(deviation, 2),
                "Above/Below": "Above" if deviation > 0 else "Below"
            })

    # Trade suggestions logic
    df_below = pd.DataFrame(outliers)
    df_above = pd.DataFrame(outliers)  # Replace this with data representing above-the-line points

    trade_data = []
    for index_below, row_below in df_below.iterrows():
        for index_above, row_above in df_above.iterrows():
            rate_duradjmod = (row_below['Deviation'] - row_above['Deviation']) / row_above['Deviation']
            if rate_duradjmod > 0.083:
                trade_data.append({
                    "CUSIP": row_below['CUSIP'],
                    "Linked_CUSIP": row_above['CUSIP']
                })

    # Return updates
    return fig, outliers, trade_data

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True, port=8051)
