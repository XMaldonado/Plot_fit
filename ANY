import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from scipy.optimize import curve_fit
import ace_tools as tools  # For displaying DataFrame in chat

# Set deviation threshold (change this value)
deviation_threshold = 30  # Change this to any percentage you want

# Sample Data
data = {
    'CUSIP': ['87264AAT', '87264AAX', '87264AAZ', '87264ABL', '87264ABN', '87264ABT', '87264ABU', '87264ABV', '87264ABX', '87264ABZ'],
    'DURADJMOD': [0.5, 10.5, 13.8, 11.9, 15.3, 4.9, 1.0, 3.2, 6.0, 0.9],
    'OAS_BP': [3.8, 102.2, 104.6, 101.3, 101.8, 74.2, 30.7, 56.2, 71.6, 39.3],
    'TICKER': ['TMUS', 'AAPL', 'AAPL', 'TMUS', 'TSLA', 'TSLA', 'TMUS', 'AAPL', 'TSLA', 'TMUS']
}

df_selected = pd.DataFrame(data)

# Remove negative OAS_BP values
df_selected = df_selected[df_selected['OAS_BP'] > 0]

# Ensure DURADJMOD > 0 for log fitting
df_selected = df_selected[df_selected['DURADJMOD'] > 0]

# Get unique tickers
unique_tickers = df_selected['TICKER'].unique()

# Create figure
fig = go.Figure()

# Store outlier information
outlier_report = []

# Dropdown buttons
buttons = []
for ticker in unique_tickers:
    # Filter for selected ticker
    df_filtered = df_selected[df_selected['TICKER'] == ticker]

    # Extract x and y values
    x = df_filtered['DURADJMOD'].values
    y = df_filtered['OAS_BP'].values

    # Define log function
    def log_func(x, a, b):
        return a * np.log(x) + b

    # Fit the log function
    if len(x) > 1:
        params, _ = curve_fit(log_func, x, y)
        y_fit = log_func(x, *params)

        # Sort x-values for smooth line
        sorted_indices = np.argsort(x)
        x_sorted = x[sorted_indices]
        y_fit_sorted = y_fit[sorted_indices]

        # Compute dynamic deviation limits
        upper_factor = 1 + (deviation_threshold / 100)
        lower_factor = 1 - (deviation_threshold / 100)

        y_fit_upper = y_fit_sorted * upper_factor
        y_fit_lower = y_fit_sorted * lower_factor

        # Detect outliers and record deviations
        for i in range(len(x)):
            actual = y[i]
            expected = log_func(x[i], *params)
            deviation = ((actual - expected) / expected) * 100

            if actual > expected * upper_factor or actual < expected * lower_factor:
                outlier_report.append({
                    "CUSIP": df_filtered.iloc[i]['CUSIP'],
                    "TICKER": ticker,
                    "DURADJMOD": x[i],
                    "OAS_BP": actual,
                    "Deviation (%)": round(deviation, 2),
                    "Above/Below": "Above" if deviation > 0 else "Below"
                })

        # Add scatter trace with hover info
        scatter_trace = go.Scatter(
            x=df_filtered['DURADJMOD'],
            y=df_filtered['OAS_BP'],
            mode='markers',
            marker=dict(size=8),
            name=f'Scatter: {ticker}',
            visible=False,
            hovertemplate="<b>CUSIP:</b> %{customdata[0]}<br><b>Ticker:</b> %{customdata[1]}<br><b>Duration:</b> %{x}<br><b>OAS:</b> %{y}",
            customdata=df_filtered[['CUSIP', 'TICKER']].values
        )

        # Add log fit trace
        log_trace = go.Scatter(
            x=x_sorted,
            y=y_fit_sorted,
            mode='lines',
            line=dict(color='red'),
            name=f'Log Fit: {ticker}',
            visible=False
        )

        # Add Upper Bound (Dynamic %)
        log_upper_trace = go.Scatter(
            x=x_sorted,
            y=y_fit_upper,
            mode='lines',
            line=dict(color='green', dash='dash'),
            name=f'{deviation_threshold}% Above Log Fit: {ticker}',
            visible=False
        )

        # Add Lower Bound (Dynamic %)
        log_lower_trace = go.Scatter(
            x=x_sorted,
            y=y_fit_lower,
            mode='lines',
            line=dict(color='blue', dash='dash'),
            name=f'{deviation_threshold}% Below Log Fit: {ticker}',
            visible=False
        )

        # Add traces
        fig.add_trace(scatter_trace)
        fig.add_trace(log_trace)
        fig.add_trace(log_upper_trace)
        fig.add_trace(log_lower_trace)

        # Create dropdown button
        button = dict(
            label=ticker,
            method="update",
            args=[{"visible": [False] * len(fig.data)}]
        )

        # Enable relevant traces
        button["args"][0]["visible"][-4] = True  # Scatter trace
        button["args"][0]["visible"][-3] = True  # Log fit trace
        button["args"][0]["visible"][-2] = True  # Upper bound
        button["args"][0]["visible"][-1] = True  # Lower bound

        buttons.append(button)

# Show first tickerâ€™s traces by default
for i in range(4):
    fig.data[i].visible = True  

# Print and display outlier report
outlier_df = pd.DataFrame(outlier_report)
if not outlier_df.empty:
    tools.display_dataframe_to_user(name=f"Outlier Report (Threshold: {deviation_threshold}%)", dataframe=outlier_df)

# Add dropdown menu
fig.update_layout(
    title=f"Modified Duration vs OAS with {deviation_threshold}% Threshold",
    updatemenus=[{
        "buttons": buttons,
        "direction": "down",
        "showactive": True,
        "x": 0.17,
        "y": 1.15
    }]
)

# Show figure
fig.show()
