V=import pandas as pd
import numpy as np
import plotly.graph_objects as go
from scipy.optimize import curve_fit
import snowflake.connector

# Set deviation threshold (change this value once)
deviation_threshold = 5  # Change to any percentage you want

### 1️⃣ DATA EXTRACTION FROM SNOWFLAKE ###
conn = snowflake.connector.connect(
    user='SAGESNOW',
    password='V2^cHfBnQQdbx28duWx*d',
    account='ESA97740.east-us-2.azure',
    warehouse='COMPUTE_WH',
    database='TRADERS',
    schema='PUBLIC'
)
cursor = conn.cursor()

# Fetch Bloomberg data
query = """
    SELECT CUSIP, TICKER, DURADJMOD, OAS_BP, QUALITYE
    FROM TRADERS.BLOOMBERG_IMPORTS.BLOOMBERG_IMPORT_BOND
    WHERE ISSRCLSL1 = 'CORPORATES'
    AND DURADJMOD > 1.0
    AND OUTSTANDE > 299999
    AND TYPPLACMT = 'SEC'
    AND TYPSUBORD = 'SRNOTES'
    AND ENTRY_DAY = '2025-02-26'
"""
cursor.execute(query)
df_bonds = cursor.fetch_pandas_all()
cursor.close()
conn.close()

# Filter and clean data
df_bonds['DURADJMOD'] = pd.to_numeric(df_bonds['DURADJMOD'], errors='coerce')
df_bonds['OAS_BP'] = pd.to_numeric(df_bonds['OAS_BP'], errors='coerce')
df_bonds = df_bonds.dropna(subset=['DURADJMOD', 'OAS_BP'])

# Keep only high-quality bonds
quality_ratings = ['AAA', 'AA1', 'AA2', 'AA3', 'A1', 'A2', 'A3', 'BAA1', 'BAA2', 'BAA3', 'BA1']
df_bonds = df_bonds[df_bonds['QUALITYE'].isin(quality_ratings)]

# Remove low frequency tickers
min_count = 5
df_bonds = df_bonds[df_bonds['TICKER'].map(df_bonds['TICKER'].value_counts()) >= min_count]

# Add ownership data
conn = snowflake.connector.connect(
    user='SAGESNOW',
    password='V2^cHfBnQQdbx28duWx*d',
    account='ESA97740.east-us-2.azure',
    warehouse='COMPUTE_WH',
    database='TRADERS',
    schema='PUBLIC'
)
cursor = conn.cursor()

# Fetch position data
query_pos = """
    SELECT trim(sd.ticker) AS TICKER, left(sd.SECURITY_ID, 8) AS CUSIP, pd.SHARE_PAR_VALUE
    FROM EAGLE.datamartdbo_position_details pd
    INNER JOIN EAGLE.datamartdbo_security_details sd 
    ON sd.security_alias = pd.security_alias
    WHERE sd.security_type = 'Corporate'
"""
cursor.execute(query_pos)
df_positions = cursor.fetch_pandas_all()
cursor.close()
conn.close()

df_positions = df_positions.groupby(['CUSIP', 'TICKER'])['SHARE_PAR_VALUE'].sum().reset_index()
df_positions = df_positions[df_positions['SHARE_PAR_VALUE'] > 2_000_000]

# Merge ownership info
df_bonds = df_bonds.merge(df_positions[['CUSIP']], on='CUSIP', how='left', indicator='Own?')
df_bonds['Own?'] = df_bonds['Own?'].map({'both': 'Y', 'left_only': 'N'})

### 2️⃣ LOG FITTING & PLOTTING ###
def log_func(x, a, b):
    return a * np.log(x) + b

# Create figure
fig = go.Figure()
buttons = []
ticker_traces = []  # To store trace indices per ticker

for ticker in sorted(df_bonds['TICKER'].unique()):
    df_filtered = df_bonds[df_bonds['TICKER'] == ticker]
    x = df_filtered['DURADJMOD'].values
    y = df_filtered['OAS_BP'].values

    if len(x) > 1:
        params, _ = curve_fit(log_func, x, y)
        y_fit = log_func(x, *params)

        # Sort x-values for smooth curve
        sorted_indices = np.argsort(x)
        x_sorted = x[sorted_indices]
        y_fit_sorted = y_fit[sorted_indices]

        # Compute dynamic deviation limits
        y_fit_upper = y_fit_sorted * (1 + deviation_threshold / 100)
        y_fit_lower = y_fit_sorted * (1 - deviation_threshold / 100)

        # Assign colors based on "Own?" status
        colors = ['blue' if own == 'N' else 'red' for own in df_filtered['Own?']]

        # Scatter plot
        trace1 = fig.add_trace(go.Scatter(
            x=df_filtered['DURADJMOD'],
            y=df_filtered['OAS_BP'],
            mode='markers',
            marker=dict(size=8, color=colors),
            name=f'{ticker}',
            visible=False,
            hovertemplate="<b>CUSIP:</b> %{customdata[0]}<br>"
                          "<b>Ticker:</b> %{customdata[1]}<br>"
                          "<b>Duration:</b> %{x}<br>"
                          "<b>OAS:</b> %{y}<br>"
                          "<b>Owned:</b> %{customdata[2]}",
            customdata=df_filtered[['CUSIP', 'TICKER', 'Own?']].values
        ))

        # Log fit line
        trace2 = fig.add_trace(go.Scatter(
            x=x_sorted, y=y_fit_sorted,
            mode='lines', line=dict(color='black'),
            name=f'Log Fit: {ticker}',
            visible=False
        ))

        # Upper Bound (Green Dashed Line)
        trace3 = fig.add_trace(go.Scatter(
            x=x_sorted, y=y_fit_upper,
            mode='lines', line=dict(color='green', dash='dash'),
            name=f'{deviation_threshold}% Above Log Fit: {ticker}',
            visible=False
        ))

        # Lower Bound (Blue Dashed Line)
        trace4 = fig.add_trace(go.Scatter(
            x=x_sorted, y=y_fit_lower,
            mode='lines', line=dict(color='blue', dash='dash'),
            name=f'{deviation_threshold}% Below Log Fit: {ticker}',
            visible=False
        ))

        # Store trace indices for each ticker
        ticker_traces.append([trace1, trace2, trace3, trace4])

# Dropdown logic (clean)
for i, ticker in enumerate(sorted(df_bonds['TICKER'].unique())):
    button = dict(
        label=ticker,
        method="update",
        args=[{"visible": [False] * len(fig.data)}]
    )
    for trace in ticker_traces[i]:
        button["args"][0]["visible"][trace._trace_index] = True
    buttons.append(button)

# Add dropdown
fig.update_layout(
    title=f"Modified Duration vs OAS ({deviation_threshold}% Threshold)",
    updatemenus=[{
        "buttons": buttons,
        "direction": "down",
        "showactive": True,
        "x": 0.17,
        "y": 1.15
    }]
)

# Make first ticker visible by default
for trace in ticker_traces[0]:
    fig.data[trace._trace_index].visible = True

fig.show()
