df_bonds.head()
df_owned1 = df_bonds[df_bonds['TICKER'] == 'HCA']
df_owned1.head(50)

x_ticker123 = df_owned1['DURADJMOD'].values
y_ticker123 = df_owned1['OAS_BP'].values
print(y_ticker123)




#this is the thing to look at 
#this is the view on things


# Define log function
def log_func(x, a, b):
    return a * np.log(x) + b

# Define Nelson-Siegel function
def ns_func(x, beta0, beta1, beta2, lambda1):
    term1 = beta0
    term2 = beta1 * (1 - np.exp(-x / lambda1)) / (x / lambda1)
    term3 = beta2 * ((1 - np.exp(-x / lambda1)) / (x / lambda1) - np.exp(-x / lambda1))
    return term1 + term2 + term3

# Define Nelson-Siegel-Svensson function
def nss_func(x, beta0, beta1, beta2, beta3, lambda1, lambda2):
    term1 = beta0
    term2 = beta1 * (1 - np.exp(-x / lambda1)) / (x / lambda1)
    term3 = beta2 * ((1 - np.exp(-x / lambda1)) / (x / lambda1) - np.exp(-x / lambda1))
    term4 = beta3 * ((1 - np.exp(-x / lambda2)) / (x / lambda2) - np.exp(-x / lambda2))
    return term1 + term2 + term3 + term4

# Fit Log function
def fit_log_curve(x, y):
    params, _ = curve_fit(log_func, x, y)
    y_fit = log_func(x, *params)
    return params, y_fit

# Fit Nelson-Siegel curve
def fit_ns_curve(x, y):
    try:
        initial_params = [0.01, -0.01, 0.01, 1.0]
        params, _ = curve_fit(ns_func, x, y, p0=initial_params, maxfev=5000)
        y_fit = ns_func(x, *params)
        return params, y_fit
    except Exception as e:
        print(f"Error fitting NS curve: {e}")
        return None, None

# Fit NSS curve
def fit_nss_curve(x, y):
    try:
        initial_params = [0.01, -0.01, 0.01, 0.01, 1.0, 1.0]
        params, _ = curve_fit(nss_func, x, y, p0=initial_params, maxfev=10000)
        y_fit = nss_func(x, *params)
        return params, y_fit
    except Exception as e:
        print(f"Error fitting NSS curve: {e}")
        return None, None

# Compute model fit statistics
def compute_model_stats(y_true, y_pred):
    r2 = r2_score(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    return r2, mse, mae, rmse

# Provided x and y values
x = np.array([13.986779,  6.800884, 13.169735,  2.665033, 12.298913,  3.724696,  5.99697,
              4.273607 , 7.446135,  2.844508,  5.677743, 13.55465  , 3.63263 , 14.720306,
              5.655824, 11.39532 , 9.707262 , 4.772538 , 2.837551 , 4.926599 , 7.276083,
              13.64568 , 1.879999 , 3.156897 ,12.847108 ,6.378774 , 1.006656 , 1.5645,
              13.213427 ,14.126781])
y = np.array([146.993601 ,126.32424 ,153.775056 ,74.388065 ,141.272824 ,86.061937 ,
              113.013621 ,94.807573 ,131.775625 ,74.560553 ,105.50337 ,152.650605 ,
              91.000755 ,139.190485 ,117.975039 ,143.601148 ,141.699124 ,94.901136 ,
              82.268513 ,100.064782 ,129.008839 ,152.418563 ,70.160617 ,83.653972 ,
              148.45025 ,118.977902 ,50.940336 ,59.84329 ,153.491968 ,170.12286 ])








# Sort the data based on x values
sorted_indices = np.argsort(x)
x_sorted = x[sorted_indices]
y_sorted = y[sorted_indices]

# Fit curves
log_params, y_log_fit = fit_log_curve(x_sorted, y_sorted)
ns_params, y_ns_fit = fit_ns_curve(x_sorted, y_sorted)
nss_params, y_nss_fit = fit_nss_curve(x_sorted, y_sorted)

# Compute stats
log_stats = compute_model_stats(y_sorted, y_log_fit)
ns_stats = compute_model_stats(y_sorted, y_ns_fit) if y_ns_fit is not None else (None, None, None, None)
nss_stats = compute_model_stats(y_sorted, y_nss_fit) if y_nss_fit is not None else (None, None, None, None)

# Create a smooth curve using interpolation
x_smooth = np.linspace(x_sorted.min(), x_sorted.max(), len(x_sorted) * 10)

# Plot
fig = go.Figure()

# Scatter plot of data points
fig.add_trace(go.Scatter(
    x=x_sorted, y=y_sorted, mode='markers', name='Data'
))

# Log curve
fig.add_trace(go.Scatter(
    x=x_smooth, y=log_func(x_smooth, *log_params), mode='lines', name='Log Curve'
))

# NS curve
if y_ns_fit is not None:
    fig.add_trace(go.Scatter(
        x=x_smooth, y=ns_func(x_smooth, *ns_params), mode='lines', name='Nelson-Siegel Curve'
    ))

# NSS curve
if y_nss_fit is not None:
    fig.add_trace(go.Scatter(
        x=x_smooth, y=nss_func(x_smooth, *nss_params), mode='lines', name='Nelson-Siegel-Svensson Curve'
    ))

# Display stats
stats_text = f"""
Log Fit:
R²: {log_stats[0]:.2f}
MSE: {log_stats[1]:.2f}
MAE: {log_stats[2]:.2f}
RMSE: {log_stats[3]:.2f}
"""
stats_text1 = f"""
NSS Fit:
R²: {nss_stats[0]:.2f}
MSE: {nss_stats[1]:.2f}
MAE: {nss_stats[2]:.2f}
RMSE: {nss_stats[3]:.2f}
"""
stats_text2 = f"""
NS Fit:
R²:  {ns_stats[0]:.2f}
MSE: {ns_stats[1]:.2f}
MAE: {ns_stats[2]:.2f}
RMSE: {ns_stats[3]:.2f}
"""
fig.add_annotation(
    text=stats_text,
    xref="paper", yref="paper",
    x=0.05, y=0.95,
    showarrow=False,
    font=dict(size=12)
)
fig.add_annotation(
    text=stats_text1,
    xref="paper", yref="paper",
    x=0.05, y=1.05,
    showarrow=False,
    font=dict(size=12)
)
fig.add_annotation(
    text=stats_text2,
    xref="paper", yref="paper",
    x=0.05, y=1.15,
    showarrow=False,
    font=dict(size=12)
)
fig.update_layout(
    title="Bond Yield Curves (Log, NS, NSS)",
    xaxis_title="Duration Adjusted Modified (DURADJMOD)",
    yaxis_title="OAS (Basis Points)",
)

fig.show()
