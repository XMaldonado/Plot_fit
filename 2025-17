df = df_bonds
# Define log function
def log_func(x, a, b):
    return a * np.log(x) + b
# Create Dash app
app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Dropdown(
        id='ticker-dropdown',
        options=[{'label': ticker, 'value': ticker} for ticker in sorted(df['TICKER'].unique())],
        value=sorted(df['TICKER'].unique())[0],
        placeholder="Select or type a ticker...",
        searchable=True,
        clearable=True,
        style={'width': '50%', 'margin-bottom': '20px'}
    ),
    
    dcc.Graph(id='graph'),

    html.Div([
        html.Div([
            html.H3("Outlier Report (Owned & Below Line)"),
            dash_table.DataTable(
                id='outlier-table',
                columns=[
                    {"name": "ID", "id": "ID"},
                    {"name": "CUSIP", "id": "CUSIP"},
                    {"name": "Deviation", "id": "Deviation"}
                    #{"name": "Above/Below", "id": "Above/Below"},
                    #{"name": "Own?", "id": "Own?"}
                ],
                data=[],
                style_table={'overflowX': 'auto'},
                style_cell={'textAlign': 'left'},
                style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'}
            )
        ], style={'width': '30%', 'display': 'inline-block'}),

        html.Div([
            html.H3("Potential Trade Targets (Above Upper Bound)"),
            dash_table.DataTable(
                id='trade-table',
                columns=[
                    {"name": "Owned CUSIP", "id": "CUSIP_Below"},
                    {"name": "Owned ID", "id": "ID_Below"},
                    {"name": "Matched ID", "id": "Matched_ID"},
                    {"name": "Matched CUSIP", "id": "Matched_CUSIP"},
                    {"name": "Ratio", "id": "Ratio_oas_dur"},
                    {"name": "Deviation", "id": "Deviation"},
                    {"name": "Dev Diff", "id": "Deviation_diff"},
                    {"name": "OAS Diff", "id": "OAS_diff"},
                    {"name": "Duration Diff", "id": "DURARION_diff"}
                    #{"name": "Above/Below", "id": "Above/Below"},
                    #{"name": "Own?", "id": "Own?"}
                ],
                data=[],
                style_table={'overflowX': 'auto'},
                style_cell={'textAlign': 'left'},
                style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'}
            )
        ], style={'width': '60%', 'display': 'inline-block', 'float': 'right'})
    ])
])

@app.callback(
    [Output('graph', 'figure'),
     Output('outlier-table', 'data'),
     Output('trade-table', 'data')],
    Input('ticker-dropdown', 'value')
)
def update_graph(selected_ticker):
    if not selected_ticker:
        return go.Figure(), [], []

    df_filtered = df[df['TICKER'] == selected_ticker]
    x = df_filtered['DURADJMOD'].values
    y = df_filtered['OAS_BP'].values
    
    if len(x) < 2:
        return go.Figure(), [], []

    # Fit log function
    params, _ = curve_fit(log_func, x, y)
    y_fit = log_func(x, *params)

    # Sort x for smoother line
    sorted_indices = np.argsort(x)
    x_sorted, y_fit_sorted = x[sorted_indices], y_fit[sorted_indices]

    # Compute deviation bands
    #deviation_threshold = 5
    y_fit_upper = y_fit_sorted * (1 + deviation_threshold / 100)
    y_fit_lower = y_fit_sorted * (1 - deviation_threshold / 100)

    # Assign colors based on ownership
    colors = ['blue' if own == 'N' else 'red' for own in df_filtered['Own?']]

    # Create figure
    fig = go.Figure()

    # Fix trace 0 for TICKER label
    fig.add_trace(go.Scatter(
        x=df_filtered['DURADJMOD'],
        y=df_filtered['OAS_BP'],
        mode='markers',
        marker=dict(size=8, color=colors),
        name=f"{selected_ticker} Bonds",
        hovertemplate="<b>ID:</b> %{customdata[3]}<br>"
                      "<b>CUSIP:</b> %{customdata[0]}<br>"
                      #"<b>Ticker:</b> %{customdata[1]}<br>"
                      "<b>Duration:</b> %{x}<br>"
                      "<b>OAS:</b> %{y}<br>",
                      #"<b>Owned:</b> %{customdata[2]}<br>",
        customdata=df_filtered[['CUSIP', 'TICKER', 'Own?','ID']]
    ))

    #Separate traces for log fit and bounds
    fig.add_trace(go.Scatter(
        x=x_sorted, y=y_fit_sorted,
        mode='lines', line=dict(color='black'),
        name="Log Fit"
    ))

    fig.add_trace(go.Scatter(
        x=x_sorted, y=y_fit_upper,
        mode='lines', line=dict(color='green', dash='dash'),
        name=f"{deviation_threshold}% Above Log Fit"
    ))

    fig.add_trace(go.Scatter(
        x=x_sorted, y=y_fit_lower,
        mode='lines', line=dict(color='blue', dash='dash'),
        name=f"{deviation_threshold}% Below Log Fit"
    ))

    # Fix SettingWithCopyWarning + Empty DataFrame Issue
    df_below = df_filtered[
        (df_filtered['Own?'] == 'Y') &
        (df_filtered['OAS_BP'] < log_func(df_filtered['DURADJMOD'], *params) * (1 - deviation_threshold / 100))
    ].copy()

    if not df_below.empty:
        df_below.loc[:, 'Deviation'] = round(df_below['OAS_BP'] - log_func(df_below['DURADJMOD'], *params),2)
        df_below.loc[:, 'Above/Below'] = 'Below'

    df_above = df_filtered[
        (df_filtered['Own?'] == 'N') &
        (df_filtered['OAS_BP'] > log_func(df_filtered['DURADJMOD'], *params) * (1 + deviation_threshold / 100))
    ].copy()

    if not df_above.empty:
        df_above.loc[:, 'Deviation'] = round(df_above['OAS_BP'] - log_func(df_above['DURADJMOD'], *params), 2)
        df_above.loc[:, 'Above/Below'] = 'Above'


    #Trade matching logic
    trade_data = []
    for _, row_below in df_below.iterrows():
        for _, row_above in df_above.iterrows():
            if row_above['DURADJMOD'] > row_below['DURADJMOD']:
                trade_data.append({
                    "CUSIP_Below": row_below['CUSIP'],
                    "ID_Below": row_below['ID'],
                    "Matched_CUSIP": row_above['CUSIP'],
                    "Matched_ID": row_above['ID'],
                    "Ratio_oas_dur": round(((row_above['OAS_BP']-row_below['OAS_BP'])/(row_above['DURADJMOD']-row_below['DURADJMOD'])), 2),
                    "Deviation": round(row_above['Deviation'], 2),
                    "Deviation_diff": round(row_above['Deviation']-row_below['Deviation'], 2),
                    "OAS_diff": round(row_above['OAS_BP']-row_below['OAS_BP'], 2),
                    "DURARION_diff": round(row_above['DURADJMOD']-row_below['DURADJMOD'], 2),
                    "Above/Below": row_above['Above/Below'],
                    "Own?": row_above['Own?']
                })


    trade_data = sorted(trade_data, key=lambda x: x['Ratio_oas_dur'], reverse=False)
    #Restore clean legend
    fig.update_layout(
        legend=dict(
            orientation="h",
            x=0,
            y=-0.3
        )
    )

    return fig, df_below.to_dict('records'), trade_data

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True, port=8051)
