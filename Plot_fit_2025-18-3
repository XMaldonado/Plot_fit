df = df_bonds
# Define log function
def log_func(x, a, b):
    return a * np.log(x) + b


def log_polyfit(x, degree=3):
    log_x = np.log(x)
    coeffs = np.polyfit(log_x,y, degree)
    return np.polyval(coeffs, log_x)
def generate_trade_data_tot(df, deviation_threshold):
    trade_data_tot = []
    for ticker in sorted(df['TICKER'].unique()):
        df_ticker = df[df['TICKER'] == ticker]
        x_ticker = df_ticker['DURADJMOD'].values
        y_ticker = df_ticker['OAS_BP'].values

        if len(x_ticker) < 2:
            continue
        params_ticker, _ = curve_fit(log_func, x_ticker, y_ticker)
        df_below_ticker = df_ticker[
            (df_ticker['Own?'] == 'Y') &
            (df_ticker['OAS_BP'] < log_func(df_ticker['DURADJMOD'], *params_ticker) * (1 - deviation_threshold / 100))
        ].copy()

        if not df_below_ticker.empty:
            df_below_ticker.loc[:, 'Deviation'] = round(df_below_ticker['OAS_BP'] - log_func(df_below_ticker['DURADJMOD'], *params_ticker), 2)
            df_below_ticker.loc[:, 'Above/Below'] = 'Below'

        df_above_ticker = df_ticker[
            (df_ticker['Own?'] == 'N') &
            (df_ticker['OAS_BP'] > log_func(df_ticker['DURADJMOD'], *params_ticker) * (1 + deviation_threshold / 100))
        ].copy()

        if not df_above_ticker.empty:
            df_above_ticker.loc[:, 'Deviation'] = round(df_above_ticker['OAS_BP'] - log_func(df_above_ticker['DURADJMOD'], *params_ticker), 2)
            df_above_ticker.loc[:, 'Above/Below'] = 'Above'

        for _, row_below in df_below_ticker.iterrows():
            for _, row_above in df_above_ticker.iterrows():
                if row_above['DURADJMOD'] > row_below['DURADJMOD']:
                    trade_data_tot.append({
                        "CUSIP_Below1": row_below['CUSIP'],
                        "ID_Below1": row_below['ID'],
                        "Matched_CUSIP1": row_above['CUSIP'],
                        "Matched_ID1": row_above['ID'],
                        "Ratio_oas_dur1": round(((row_above['OAS_BP'] - row_below['OAS_BP']) / (row_above['DURADJMOD'] - row_below['DURADJMOD'])), 2),
                        "Deviation1": round(row_above['Deviation'], 2),
                        "Deviation_diff1": round(row_above['Deviation'] - row_below['Deviation'], 2),
                        "OAS_diff1": round(row_above['OAS_BP'] - row_below['OAS_BP'], 2),
                        "DURATION_diff1": round(row_above['DURADJMOD'] - row_below['DURADJMOD'], 2),
                        "Above/Below1": row_above['Above/Below'],
                        "Own?1": row_above['Own?']
                    })
                    
                    #trade_data_tot = sorted(trade_data_tot, key=lambda x: x['Ratio_oas_dur1'], reverse=False)
                    trade_data_tot = sorted(trade_data_tot, key=lambda x: (x['ID_Below1'], x['Ratio_oas_dur1']), reverse=False)
    return trade_data_tot
trade_data_tot = generate_trade_data_tot(df, deviation_threshold)
# Create Dash app
app = dash.Dash(__name__)
app.layout = html.Div([
    dcc.Dropdown(
        id='ticker-dropdown',
        options=[{'label': ticker, 'value': ticker} for ticker in sorted(df['TICKER'].unique())],
        value=sorted(df['TICKER'].unique())[0],
        placeholder="Select or type a ticker...",
        searchable=True,
        clearable=True,
        style={'width': '50%', 'margin-bottom': '20px'}
    ),
    
    dcc.Graph(id='graph'),

    html.Div([
        html.Div([
            html.H3("Outlier Report (Owned & Below Line)"),
            dash_table.DataTable(
                id='outlier-table',
                columns=[
                    {"name": "ID", "id": "ID"},
                    {"name": "CUSIP", "id": "CUSIP"},
                    {"name": "Deviation", "id": "Deviation"}
                ],
                data=[],
                style_table={'overflowX': 'auto'},
                style_cell={'textAlign': 'left'},
                style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'}
            )
        ], style={'width': '30%', 'display': 'inline-block'}),

        html.Div([
            html.H3("Potential Trade Targets (Above Upper Bound)"),
            dash_table.DataTable(
                id='trade-table',
                columns=[
                    {"name": "Owned CUSIP", "id": "CUSIP_Below"},
                    {"name": "Owned ID", "id": "ID_Below"},
                    {"name": "Matched ID", "id": "Matched_ID"},
                    {"name": "Matched CUSIP", "id": "Matched_CUSIP"},
                    {"name": "Ratio", "id": "Ratio_oas_dur"},
                    {"name": "Deviation", "id": "Deviation"},
                    {"name": "Dev Diff", "id": "Deviation_diff"},
                    {"name": "OAS Diff", "id": "OAS_diff"},
                    {"name": "Duration Diff", "id": "DURATION_diff"}
                ],
                data=[],
                style_table={'overflowX': 'auto'},
                style_cell={'textAlign': 'left'},
                style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'}
            )
        ], style={'width': '65%', 'display': 'inline-block', 'float': 'right'})
    ]),

    html.Div([
        html.H3("All Trade Targets (Owned & Above Upper Bound)"),
        dash_table.DataTable(
            id='trade-table-tot',
            columns=[
                {"name": "Owned CUSIP", "id": "CUSIP_Below1"},
                {"name": "Owned ID", "id": "ID_Below1"},
                {"name": "Matched ID", "id": "Matched_ID1"},
                {"name": "Matched CUSIP", "id": "Matched_CUSIP1"},
                {"name": "Ratio", "id": "Ratio_oas_dur1"},
                {"name": "Deviation", "id": "Deviation1"},
                {"name": "Dev Diff", "id": "Deviation_diff1"},
                {"name": "OAS Diff", "id": "OAS_diff1"},
                {"name": "Duration Diff", "id": "DURATION_diff1"}
            ],
            data=[],
            style_table={'overflowX': 'auto'},
            style_cell={'textAlign': 'left'},
            style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'}
        )
    ], style={'width': '100%', 'display': 'inline-block', 'float': 'right'})
])

@app.callback(
    [Output('graph', 'figure'),
     Output('outlier-table', 'data'),
     Output('trade-table', 'data'),
     Output('trade-table-tot', 'data')],
    Input('ticker-dropdown', 'value')
)
def update_graph(selected_ticker):
#def update_graph(selected_ticker,trade_data_tot==trade_data_tot ):
    if not selected_ticker:
        return go.Figure(), [], [], []

    df_filtered = df[df['TICKER'] == selected_ticker]
    x = df_filtered['DURADJMOD'].values
    y = df_filtered['OAS_BP'].values

    if len(x) < 2:
        return go.Figure(), [], [], []
    # Fit log function
    params, _ = curve_fit(log_func, x, y)
    y_fit = log_func(x, *params)

    # Sort x for smoother line
    sorted_indices = np.argsort(x)
    x_sorted, y_fit_sorted = x[sorted_indices], y_fit[sorted_indices]

    # Compute deviation bands
    y_fit_upper = y_fit_sorted * (1 + deviation_threshold / 100)
    y_fit_lower = y_fit_sorted * (1 - deviation_threshold / 100)

    # Assign colors based on ownership
    colors = ['blue' if own == 'N' else 'red' for own in df_filtered['Own?']]

    # Create figure
    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=df_filtered['DURADJMOD'],
        y=df_filtered['OAS_BP'],
        mode='markers',
        marker=dict(size=8, color=colors),
        name=f"{selected_ticker} Bonds",
        hovertemplate="<b>ID:</b> %{customdata[3]}<br>"
                      "<b>CUSIP:</b> %{customdata[0]}<br>"
                      "<b>Duration:</b> %{x}<br>"
                      "<b>OAS:</b> %{y}<br>",
        customdata=df_filtered[['CUSIP', 'TICKER', 'Own?', 'ID']]
    ))

    fig.add_trace(go.Scatter(
        x=x_sorted, y=y_fit_sorted,
        mode='lines', line=dict(color='black'),
        name="Log Fit"
    ))
    # âœ… Add title and axis labels
    fig.update_layout(
        title=f"{selected_ticker} Bonds - OAS vs Duration",
        xaxis=dict(
            title="Duration Adjusted Modified (DURADJMOD)",
            showgrid=True
        ),
        yaxis=dict(
            title="OAS (Basis Points)",
            showgrid=True
        ),
        legend=dict(
            orientation="h",
            x=0,
            y=-0.3
        )
    )
    fig.add_trace(go.Scatter(
        x=x_sorted, y=y_fit_upper,
        mode='lines', line=dict(color='green', dash='dash'),
        name=f"{deviation_threshold}% Above Log Fit"
    ))

    fig.add_trace(go.Scatter(
        x=x_sorted, y=y_fit_lower,
        mode='lines', line=dict(color='blue', dash='dash'),
        name=f"{deviation_threshold}% Below Log Fit"
    ))

    df_below = df_filtered[
        (df_filtered['Own?'] == 'Y') &
        (df_filtered['OAS_BP'] < log_func(df_filtered['DURADJMOD'], *params) * (1 - deviation_threshold / 100))
    ].copy()

    if not df_below.empty:
        df_below.loc[:, 'Deviation'] = round(df_below['OAS_BP'] - log_func(df_below['DURADJMOD'], *params), 2)
        df_below.loc[:, 'Above/Below'] = 'Below'

    df_above = df_filtered[
        (df_filtered['Own?'] == 'N') &
        (df_filtered['OAS_BP'] > log_func(df_filtered['DURADJMOD'], *params) * (1 + deviation_threshold / 100))
    ].copy()

    if not df_above.empty:
        df_above.loc[:, 'Deviation'] = round(df_above['OAS_BP'] - log_func(df_above['DURADJMOD'], *params), 2)
        df_above.loc[:, 'Above/Below'] = 'Above'

    trade_data = []
    for _, row_below in df_below.iterrows():
        for _, row_above in df_above.iterrows():
            if row_above['DURADJMOD'] > row_below['DURADJMOD']:
                trade_data.append({
                    "CUSIP_Below": row_below['CUSIP'],
                    "ID_Below": row_below['ID'],
                    "Matched_CUSIP": row_above['CUSIP'],
                    "Matched_ID": row_above['ID'],
                    "Ratio_oas_dur": round(((row_above['OAS_BP'] - row_below['OAS_BP']) / (row_above['DURADJMOD'] - row_below['DURADJMOD'])), 2),
                    "Deviation": round(row_above['Deviation'], 2),
                    "Deviation_diff": round(row_above['Deviation'] - row_below['Deviation'], 2),
                    "OAS_diff": round(row_above['OAS_BP'] - row_below['OAS_BP'], 2),
                    "DURATION_diff": round(row_above['DURADJMOD'] - row_below['DURADJMOD'], 2),
                    "Above/Below": row_above['Above/Below'],
                    "Own?": row_above['Own?']
                })

    trade_data = sorted(trade_data, key=lambda x: x['Ratio_oas_dur'], reverse=False)

    # Restore clean legend
    fig.update_layout(
        legend=dict(
            orientation="h",
            x=0,
            y=-0.3
        )
    )
    return fig, df_below.to_dict('records'), trade_data, trade_data_tot

if __name__ == '__main__':
   app.run_server(debug=True, port=8057)
