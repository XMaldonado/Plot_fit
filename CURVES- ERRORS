import pandas as pd
import numpy as np
import plotly.graph_objects as go
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

# Define log function
def log_func(x, a, b):
    return a * np.log(x) + b

# Define Nelson-Siegel function
def ns_func(x, beta0, beta1, beta2, lambda1):
    term1 = beta0
    term2 = beta1 * (1 - np.exp(-x / lambda1)) / (x / lambda1)
    term3 = beta2 * ((1 - np.exp(-x / lambda1)) / (x / lambda1) - np.exp(-x / lambda1))
    return term1 + term2 + term3

# Define Nelson-Siegel-Svensson function
def nss_func(x, beta0, beta1, beta2, beta3, lambda1, lambda2):
    term1 = beta0
    term2 = beta1 * (1 - np.exp(-x / lambda1)) / (x / lambda1)
    term3 = beta2 * ((1 - np.exp(-x / lambda1)) / (x / lambda1) - np.exp(-x / lambda1))
    term4 = beta3 * ((1 - np.exp(-x / lambda2)) / (x / lambda2) - np.exp(-x / lambda2))
    return term1 + term2 + term3 + term4

# Fit Log function
def fit_log_curve(x, y):
    params, _ = curve_fit(log_func, x, y)
    y_fit = log_func(x, *params)
    return params, y_fit

# Fit Nelson-Siegel curve
def fit_ns_curve(x, y):
    try:
        initial_params = [0.01, -0.01, 0.01, 1.0]
        params, _ = curve_fit(ns_func, x, y, p0=initial_params, maxfev=5000)
        y_fit = ns_func(x, *params)
        return params, y_fit
    except Exception as e:
        print(f"Error fitting NS curve: {e}")
        return None, None

# Fit NSS curve
def fit_nss_curve(x, y):
    try:
        initial_params = [0.01, -0.01, 0.01, 0.01, 1.0, 1.0]
        params, _ = curve_fit(nss_func, x, y, p0=initial_params, maxfev=5000)
        y_fit = nss_func(x, *params)
        return params, y_fit
    except Exception as e:
        print(f"Error fitting NSS curve: {e}")
        return None, None

# Compute model fit statistics
def compute_model_stats(y_true, y_pred):
    r2 = r2_score(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    return r2, mse, mae, rmse

# Example data (replace with real data)
x = np.array([1, 2, 3, 4, 5, 6, 7, 8])
y = np.array([2.1, 2.5, 3.0, 3.5, 4.0, 4.8, 5.5, 6.2])

# Fit curves
log_params, y_log_fit = fit_log_curve(x, y)
ns_params, y_ns_fit = fit_ns_curve(x, y)
nss_params, y_nss_fit = fit_nss_curve(x, y)

# Compute stats
log_stats = compute_model_stats(y, y_log_fit)
ns_stats = compute_model_stats(y, y_ns_fit) if y_ns_fit is not None else (None, None, None, None)
nss_stats = compute_model_stats(y, y_nss_fit) if y_nss_fit is not None else (None, None, None, None)

# Plot
fig = go.Figure()

# Scatter plot of data points
fig.add_trace(go.Scatter(
    x=x, y=y, mode='markers', name='Data'
))

# Log curve
fig.add_trace(go.Scatter(
    x=x, y=y_log_fit, mode='lines', name='Log Curve'
))

# NS curve
if y_ns_fit is not None:
    fig.add_trace(go.Scatter(
        x=x, y=y_ns_fit, mode='lines', name='Nelson-Siegel Curve'
    ))

# NSS curve
if y_nss_fit is not None:
    fig.add_trace(go.Scatter(
        x=x, y=y_nss_fit, mode='lines', name='Nelson-Siegel-Svensson Curve'
    ))

# Display stats
stats_text = f"""
Log Fit:
R²: {log_stats[0]:.4f}
MSE: {log_stats[1]:.4f}
MAE: {log_stats[2]:.4f}
RMSE: {log_stats[3]:.4f}

NS Fit:
R²: {ns_stats[0]:.4f}
MSE: {ns_stats[1]:.4f}
MAE: {ns_stats[2]:.4f}
RMSE: {ns_stats[3]:.4f}

NSS Fit:
R²: {nss_stats[0]:.4f}
MSE: {nss_stats[1]:.4f}
MAE: {nss_stats[2]:.4f}
RMSE: {nss_stats[3]:.4f}
"""

fig.add_annotation(
    text=stats_text,
    xref="paper", yref="paper",
    x=0.05, y=0.95,
    showarrow=False,
    font=dict(size=12)
)

fig.update_layout(
    title="Bond Yield Curves (Log, NS, NSS)",
    xaxis_title="Duration Adjusted Modified (DURADJMOD)",
    yaxis_title="OAS (Basis Points)",
)

fig.show()
