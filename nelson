import pandas as pd
import numpy as np
import plotly.graph_objects as go
from scipy.optimize import curve_fit
import snowflake.connector

# Set deviation threshold (change this value once)
deviation_threshold = 5  # Change to any percentage you want

### 1️⃣ SNOWFLAKE QUERY & DATA EXTRACTION ###

# Connect to Snowflake
conn = snowflake.connector.connect(
    user='SAGESNOW',
    password='V2^cHfBnQQdbx28duWx*d',
    account='ESA97740.east-us-2.azure',
    warehouse='COMPUTE_WH',
    database='TRADERS',
    schema='PUBLIC'
)
cursor = conn.cursor()

# Fetch fund position details
query1 = """SELECT trim(sd.ticker) as TICKER, left(sd.SECURITY_ID, 8) as CUSIP, pd.SHARE_PAR_VALUE
            FROM EAGLE.datamartdbo_position_details pd
            INNER JOIN EAGLE.datamartdbo_security_details sd 
            ON sd.security_alias = pd.security_alias
            WHERE sd.security_type = 'Corporate'"""
cursor.execute(query1)
df_positions = cursor.fetch_pandas_all()
cursor.close()

# Filter positions > $2M
df_positions = df_positions.groupby(['CUSIP', 'TICKER'])['SHARE_PAR_VALUE'].sum().reset_index()
df_positions = df_positions[df_positions['SHARE_PAR_VALUE'] > 2_000_000]

# Fetch Bloomberg bond data
cursor = conn.cursor()
query2 = """SELECT CUSIP, TICKER, DURADJMOD, OAS_BP, QUALITYE
            FROM TRADERS.BLOOMBERG_IMPORTS.BLOOMBERG_IMPORT_BOND 
            WHERE ISSRCLSL1 = 'CORPORATES' 
            AND DURADJMOD > 1.0 
            AND OUTSTANDE > 299999 
            AND TYPPLACMT = 'SEC' 
            AND TYPSUBORD = 'SRNOTES'"""
cursor.execute(query2)
df_bonds = cursor.fetch_pandas_all()
cursor.close()
conn.close()

# Merge position data into bond data (flag owned securities)
df_bonds = df_bonds.merge(df_positions[['CUSIP']], on='CUSIP', how='left', indicator='Own?')
df_bonds['Own?'] = df_bonds['Own?'].map({'both': 'Y', 'left_only': 'N'})

### 2️⃣ FILTERING DATA ###

# Remove tickers with low frequency
df_bonds = df_bonds[df_bonds['TICKER'].map(df_bonds['TICKER'].value_counts()) >= 5]

# Keep only high-quality bonds
quality_ratings = ['AAA', 'AA1', 'AA2', 'AA3', 'A1', 'A2', 'A3', 'BAA1', 'BAA2', 'BAA3', 'BA1']
df_bonds = df_bonds[df_bonds['QUALITYE'].isin(quality_ratings)]

# Convert columns to numeric & remove invalid values
df_bonds['DURADJMOD'] = pd.to_numeric(df_bonds['DURADJMOD'], errors='coerce')
df_bonds['OAS_BP'] = pd.to_numeric(df_bonds['OAS_BP'], errors='coerce')
df_bonds = df_bonds.dropna(subset=['DURADJMOD', 'OAS_BP'])

### 3️⃣ APPLY NELSON-SIEGEL CURVE FIT ###

# Nelson-Siegel function
def nelson_siegel(t, beta0, beta1, beta2, tau):
    return (beta0 + 
            beta1 * ((1 - np.exp(-t / tau)) / (t / tau)) + 
            beta2 * (((1 - np.exp(-t / tau)) / (t / tau)) - np.exp(-t / tau)))

# Fit Nelson-Siegel for each ticker
unique_tickers = sorted(df_bonds['TICKER'].unique())
fig = go.Figure()
outlier_report = []
buttons = []

for ticker in unique_tickers:
    df_ticker = df_bonds[df_bonds['TICKER'] == ticker]
    x = df_ticker['DURADJMOD'].values
    y = df_ticker['OAS_BP'].values

    if len(x) > 3:  # At least 4 points required for stable fitting
        params, _ = curve_fit(nelson_siegel, x, y, p0=[1, 1, 1, 1])
        y_fit = nelson_siegel(x, *params)

        # Sort x-values for a smooth line
        sorted_indices = np.argsort(x)
        x_sorted, y_fit_sorted = x[sorted_indices], y_fit[sorted_indices]

        # Compute threshold bands
        upper_factor = 1 + (deviation_threshold / 100)
        lower_factor = 1 - (deviation_threshold / 100)
        y_fit_upper = y_fit_sorted * upper_factor
        y_fit_lower = y_fit_sorted * lower_factor

        # Detect outliers
        for i in range(len(x)):
            expected = nelson_siegel(x[i], *params)
            actual = y[i]
            deviation = actual - expected

            if actual > expected * upper_factor or actual < expected * lower_factor:
                outlier_report.append({
                    "CUSIP": df_ticker.iloc[i]['CUSIP'],
                    "TICKER": ticker,
                    "DURADJMOD": x[i],
                    "OAS_BP": actual,
                    "Deviation": round(deviation, 2),
                    "Above/Below": "Above" if deviation > 0 else "Below"
                })

        # Add scatter & curve to the plot
        fig.add_trace(go.Scatter(
            x=df_ticker['DURADJMOD'], y=df_ticker['OAS_BP'],
            mode='markers', marker=dict(size=8),
            name=f'Scatter: {ticker}', visible=False,
            hovertemplate="<b>CUSIP:</b> %{customdata[0]}<br><b>Ticker:</b> %{customdata[1]}<br><b>Duration:</b> %{x}<br><b>OAS:</b> %{y}",
            customdata=df_ticker[['CUSIP', 'TICKER']].values
        ))

        fig.add_trace(go.Scatter(
            x=x_sorted, y=y_fit_sorted,
            mode='lines', line=dict(color='red'),
            name=f'Nelson-Siegel Fit: {ticker}', visible=False
        ))

        fig.add_trace(go.Scatter(
            x=x_sorted, y=y_fit_upper,
            mode='lines', line=dict(color='green', dash='dash'),
            name=f'{deviation_threshold}% Above NS Fit: {ticker}', visible=False
        ))

        fig.add_trace(go.Scatter(
            x=x_sorted, y=y_fit_lower,
            mode='lines', line=dict(color='blue', dash='dash'),
            name=f'{deviation_threshold}% Below NS Fit: {ticker}', visible=False
        ))

        # Add dropdown button
        button = dict(
            label=ticker,
            method="update",
            args=[{"visible": [False] * len(fig.data)}]
        )
        button["args"][0]["visible"][-4:] = [True, True, True, True]  # Enable relevant traces
        buttons.append(button)

# Show first ticker's traces by default
for i in range(4):
    fig.data[i].visible = True  

# Add dropdown
fig.update_layout(
    title=f"Modified Duration vs OAS ({deviation_threshold}% Threshold)",
    updatemenus=[{
        "buttons": buttons,
        "direction": "down",
        "showactive": True,
        "x": 0.17,
        "y": 1.15
    }]
)

fig.show()

# Display outlier report
outlier_df = pd.DataFrame(outlier_report)
if not outlier_df.empty:
    import ace_tools as tools
    tools.display_dataframe_to_user(name="Outlier Report", dataframe=outlier_df)
