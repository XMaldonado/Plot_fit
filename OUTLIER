import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from scipy.optimize import curve_fit
import ace_tools as tools  # For displaying DataFrame in chat

# Sample Data
data = {
    'CUSIP': ['87264AAT', '87264AAX', '87264AAZ', '87264ABL', '87264ABN', '87264ABT', '87264ABU', '87264ABV', '87264ABX', '87264ABZ', '87264ACA', '87264ACW', '87264ADA', '87264ADB', '87264ABS', '87264ACB', '87264ACV', '87264ACZ', '87264ADD', '87264ADE', '87264ACS', '87264ADL', '87264ABD', '87264ABF', '87264ABR', '87264ABW', '87264ACQ', '87264ACX', '87264ADC', '87264ADM', '87264ADN', '87264AAV', '87264ABY', '87264ACT', '87264ADF', '87264ACY'],
    'DURADJMOD': [0.195957, 10.508028, 13.801842, 11.957162, 15.319429, 4.974973, 1.061923, 3.231687, 6.015830, 0.941978, 2.808230, 13.842199, 3.036167, 13.968807, 3.432350, 5.381027, 6.308612, 2.702008, 13.866229, 3.449895, 3.717738, 4.026430, 1.945059, 4.454522, 0.935959, 4.718884, 6.146110, 14.833652, 6.841497, 7.690534, 14.432515, 12.268688, 16.384743, 15.332133, 7.029721, 6.662572],
    'OAS_BP': [3.832233, 102.280628, 104.621630, 101.307740, 101.824732, 74.215465, 30.733083, 56.212321, 71.652176, 39.353237, 50.847827, 110.812124, 54.580535, 112.762990, 58.196295, 75.143776, 82.904543, 54.520434, 112.938248, 56.228657, 68.383500, 58.303346, 48.456803, 70.115085, 47.216601, 65.801122, 83.037342, 124.388226, 84.652055, 89.711784, 111.981874, 62.203598, 112.368863, 102.907868, 83.561249, 84.914456],
    'TICKER': ['TMUS', 'AAPL', 'AAPL', 'TMUS', 'TSLA', 'TSLA', 'TMUS', 'AAPL', 'TSLA', 'TMUS', 'AAPL', 'AAPL', 'TSLA', 'TSLA', 'TMUS', 'TSLA', 'AAPL', 'TSLA', 'TMUS', 'TSLA', 'AAPL', 'AAPL', 'TSLA', 'TSLA', 'TMUS', 'AAPL', 'AAPL', 'TSLA', 'AAPL', 'TSLA', 'TSLA', 'AAPL', 'TSLA', 'AAPL', 'AAPL', 'TMUS']
}

df_selected = pd.DataFrame(data)

# Remove negative OAS_BP values
df_selected = df_selected[df_selected['OAS_BP'] > 0]

# Ensure DURADJMOD > 0 for log fitting
df_selected = df_selected[df_selected['DURADJMOD'] > 0]

# Get unique tickers
unique_tickers = df_selected['TICKER'].unique()

# Create figure
fig = go.Figure()

# Store outlier information
outlier_report = []

# Dropdown buttons
buttons = []
for ticker in unique_tickers:
    # Filter for selected ticker
    df_filtered = df_selected[df_selected['TICKER'] == ticker]

    # Extract x and y values
    x = df_filtered['DURADJMOD'].values
    y = df_filtered['OAS_BP'].values

    # Define log function
    def log_func(x, a, b):
        return a * np.log(x) + b

    # Fit the log function
    if len(x) > 1:
        params, _ = curve_fit(log_func, x, y)
        y_fit = log_func(x, *params)

        # Sort x-values for smooth line
        sorted_indices = np.argsort(x)
        x_sorted = x[sorted_indices]
        y_fit_sorted = y_fit[sorted_indices]

        # Compute 25% above & below log fit
        y_fit_upper = y_fit_sorted * 1.25
        y_fit_lower = y_fit_sorted * 0.75

        # Detect outliers and record deviations
        for i in range(len(x)):
            actual = y[i]
            expected = log_func(x[i], *params)
            deviation = ((actual - expected) / expected) * 100

            if actual > expected * 1.25 or actual < expected * 0.75:
                outlier_report.append({
                    "CUSIP": df_filtered.iloc[i]['CUSIP'],
                    "TICKER": ticker,
                    "DURADJMOD": x[i],
                    "OAS_BP": actual,
                    "Deviation (%)": round(deviation, 2),
                    "Above/Below": "Above" if deviation > 0 else "Below"
                })

        # Add scatter trace with hover info
        scatter_trace = go.Scatter(
            x=df_filtered['DURADJMOD'],
            y=df_filtered['OAS_BP'],
            mode='markers',
            marker=dict(size=8),
            name=f'Scatter: {ticker}',
            visible=False,
            hovertemplate="<b>CUSIP:</b> %{customdata[0]}<br><b>Ticker:</b> %{customdata[1]}<br><b>Duration:</b> %{x}<br><b>OAS:</b> %{y}",
            customdata=df_filtered[['CUSIP', 'TICKER']].values
        )

        # Add log fit trace
        log_trace = go.Scatter(
            x=x_sorted,
            y=y_fit_sorted,
            mode='lines',
            line=dict(color='red'),
            name=f'Log Fit: {ticker}',
            visible=False
        )

        # Add 25% above log fit line
        log_25_up_trace = go.Scatter(
            x=x_sorted,
            y=y_fit_upper,
            mode='lines',
            line=dict(color='green', dash='dash'),
            name=f'25% Above Log Fit: {ticker}',
            visible=False
        )

        # Add 25% below log fit line
        log_25_down_trace = go.Scatter(
            x=x_sorted,
            y=y_fit_lower,
            mode='lines',
            line=dict(color='blue', dash='dash'),
            name=f'25% Below Log Fit: {ticker}',
            visible=False
        )

        # Add traces
        fig.add_trace(scatter_trace)
        fig.add_trace(log_trace)
        fig.add_trace(log_25_up_trace)
        fig.add_trace(log_25_down_trace)

# Show first tickerâ€™s traces by default
for i in range(4):
    fig.data[i].visible = True  

# Print and display outlier report
outlier_df = pd.DataFrame(outlier_report)
if not outlier_df.empty:
    tools.display_dataframe_to_user(name="Outlier Report", dataframe=outlier_df)

# Show figure
fig.show()
